{
	"info": {
		"_postman_id": "59c9d166-7c32-4093-bf6b-10921dad14b4",
		"name": "Relocate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26631222"
	},
	"item": [
		{
			"name": "Auth-login",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Login of a registered user with correct 'email’, ‘password’",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cookies = pm.cookies;",
											"const accessToken = cookies.get('access_token');",
											"pm.globals.set('access_token', accessToken);",
											"const refreshToken = cookies.get('refresh_token');",
											"pm.globals.set('refresh_token', refreshToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"pm.test(\"fetch access_token\", ()=>{",
											"    var access_token = pm.cookies.get('access_token');",
											"    pm.collectionVariables.set(\"access_token\", access_token);",
											"})",
											"pm.test(\"fetch refresh_token\", ()=>{",
											"    var refresh_token = pm.cookies.get('refresh_token');",
											"    pm.collectionVariables.set(\"refresh_token\", refresh_token);",
											"})",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of unregistered user with valid ‘email’, ‘password’",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Проверка текста сообщения\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData. message).to.eql(\"Неверный пароль или e-mail\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"k0ndrateva861216354@yandex.ru\",\n  \"password\": \"Lagavo32#@\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Negative email",
							"item": [
								{
									"name": "Login with missing key ‘email’",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"email не должен быть пустым\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \n  \"password\": \"Lagavo33\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with missing value ‘email’",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"text message verification \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Невалидный json в теле запроса\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\":,\n  \"password\": \"Lagavo33\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with null value of the ‘email’ key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"email должен быть string\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": null,\n  \"password\": \"Lagavo33\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with ‘ email’ key value SQL injection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Неверный пароль или e-mail\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"SELECT * FROM users Limit 3;-- \",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with ‘ email’ key value XSS injection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Неверный пароль или e-mail\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<script>alert('XSS')</script>\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative password",
							"item": [
								{
									"name": "Login with missing ‘password’ key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"password не должен быть пустым\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"k0ndrateva861216@yandex.ru\"\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with missing ‘password’ key value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Невалидный json в теле запроса\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"k0ndrateva861216@yandex.ru\",\n  \"password\": \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with the value null of the ‘password’ key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"password должен быть string\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"k0ndrateva861216@yandex.ru\",\n  \"password\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with ‘ password’ key value SQL injection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Неверный пароль или e-mail\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"SELECT * FROM users LIMIT 3;-- \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with ‘ password’ key value XSS injection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test(\"text message verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Неверный пароль или e-mail\");",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"<script>alert('XSS')</script>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Login of a registered user with wrong ‘email’ and correct ‘password’",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Проверка текста сообщения\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Неверный пароль или e-mail\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"k0ndrateva86121635544@yandex.ru\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of a registered user with a valid ‘email’ and an invalid ‘password’",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Проверка текста сообщения\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Неверный пароль или e-mail\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Lagavo32#@\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with empty json in the request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"test message verification\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"email не должен быть пустым\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with request body with non-json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"text message verification\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Невалидный json в теле запроса\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n  \"email\": \"k0ndrateva861216@yandex.ru\",\n  \"password\": \"Lagavo33\"\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Проверки на вход зарегистрированного пользователя через email, password.\n\n204 Вход пользователя через email, пароль  \n400 1) Невалидный json в теле запроса  \n400 2) email/password должен быть string  \n400 3) email/password не должен быть пустым  \n401 Неверный пароль или email"
		},
		{
			"name": "Blog",
			"item": [
				{
					"name": "Show All Blogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/b",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Blog",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/blog/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"blog",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Blog Page",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/blog/page",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"blog",
								"page"
							]
						}
					},
					"response": []
				},
				{
					"name": "Leave a comment in Blog",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Тестовый коммент\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/blog/1/comment",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"blog",
								"1",
								"comment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Country",
			"item": [
				{
					"name": "Show All Countries",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/country",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show A Country",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/country/ger",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"country",
								"ger"
							]
						}
					},
					"response": []
				},
				{
					"name": "Compare Countries",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/country/compare",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"country",
								"compare"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create comment",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "login_get tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\",  ()=>{",
											"    pm.response.to.have.status(204)",
											"})",
											"",
											"pm.test(\"fetch access_token\", ()=>{",
											"    var access_token = pm.cookies.get('access_token');",
											"    pm.collectionVariables.set(\"access_token\", access_token);",
											"})",
											"",
											"pm.test(\"fetch refresh_token\", ()=>{",
											"    var refresh_token = pm.cookies.get('refresh_token');",
											"    pm.collectionVariables.set(\"refresh_token\", refresh_token);",
											"})",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\n{\n    \"email\": \"adkogan@gmail.com\",\n    \"password\": \"Qwerty123$\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сreate comment_all valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 2,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "P. Get created comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Bazinga\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName(cyr, 49 letters spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Тестовое имя пользователя для создания комментария блог\",\n  \"text\": \"You're in my spot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "P. Get created comment_check user_name_49letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"my spot\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text_inCyrillic.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Amy\",\n  \"text\": \"«Тео́рия Большо́го взры́ва» (англ. The Big Bang Theory) — американский ситком, созданный Чаком Лорри и Биллом Прэди, которые наряду со Стивеном Моларо являлись главными сценаристами телешоу. Премьера сериала состоялась 24 сентября 2007 года на канале CBS, а показ финального сезона завершился 16 мая 2019 года.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created comment_text in Cyrillic check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"американский ситком\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with 2499 symbols(spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Penny\",\n  \"text\": \"The Big Bang Theory is an American television sitcom created by Chuck Lorre and Bill Prady, both of whom served as executive producers and head writers on the series, along with Steven Molaro. It aired on CBS from September 24, 2007, to May 16, 2019, running for 12 seasons and 279 episodes. The show originally centered on five characters living in Pasadena, California: Leonard Hofstadter (Johnny Galecki) and Sheldon Cooper (Jim Parsons), both physicists at Caltech, who share an apartment; Penny (Kaley Cuoco), a waitress and aspiring actress who lives across the hall; and Leonard and Sheldon's similarly geeky and socially awkward friends and coworkers, aerospace engineer Howard Wolowitz (Simon Helberg) and astrophysicist Raj Koothrappali (Kunal Nayyar). Over time, supporting characters were promoted to starring roles, including neuroscientist Amy Farrah Fowler (Mayim Bialik), microbiologist Bernadette Rostenkowski (Melissa Rauch), and comic book store owner Stuart Bloom (Kevin Sussman).The show was filmed in front of a live audience and produced by Chuck Lorre Productions, with Warner Bros. Television handling distribution. It received mixed reviews throughout its first season, but reception was more favorable in the second and third seasons. Despite early mixed reviews, seven seasons were ranked within the top ten of the final season ratings, and it ultimately reached the No. 1 spot in its eleventh season. It was nominated for the Emmy Award for Outstanding Comedy Series from 2011 to 2014 and won the Emmy Award for Outstanding Lead Actor in a Comedy Series four times for Parsons, totaling seven Emmy Awards from 46 nominations. Parsons also won the Golden Globe for Best Actor in a Television Comedy Series in 2011.The series' success launched a multimedia franchise. A prequel series, titled Young Sheldon and based on Parsons' character Sheldon Cooper, aired from 2017 to 2024, with Parsons reprising his role as the narrating adult Sheldon. The third series in the franchise, a sequel series to Young Sheldon titled Georgie & Mandy's First Marriage, premiered in October 2024 and follows Sheldon's older brother, Georgie, and his wife, Mandy. A fourth series, following Stuart, his girlfriend Denise, and geologist Bert Kibbler, is in development for Max. The show's pilot episode premiered on September 24, 2007. This was the second pilot produced for the show. A different pilot was produced for the 2006–07 television season but never aired. The structure of the original unaired pilot was different from the series' current form. The only main characters retained in both pilots were Leonard (Johnny Galecki) and Sheldon (Jim Parsons), who are named after Sheldon Leonard, a longtime figure in episodic television as a producer, director, and actor. A minor character, Althea (Vernee Watson), appeared in the first scene of both pilots that was retained generally as-is.The first pilot included two female lead characters (p\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created comment_text with 2499 symbols(spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The Big Bang Theory is an American television sitcom\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName consists of only one letter.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"S\",\n  \"text\": \"Howard Wolowitz\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created comment_check userName_one letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// pm.test(\"Status code is 400\", function () {",
											"//     pm.response.to.have.status(400);",
											"// });",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"S\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with 1 symbol.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											"",
											"// pm.test(\"Status code is 400\", function () {",
											"//     pm.response.to.have.status(400);",
											"// });",
											"",
											"// pm.test(\"Response message check\", function () {",
											"// var jsonData = pm.response.json();",
											"// pm.expect(jsonData. message).to.eql(\"text must contain more than one symbol\");",
											"// });",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Big Bang Theory\",\n  \"text\": \"J\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created comment_text with 1 symbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"J\");",
											"});",
											"",
											"// pm.test(\"Status code is 400\", function () {",
											"//     pm.response.to.have.status(400);",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with 2500 symbols(spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"userName должен быть string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Bernadette\",\n  \"text\": \"The Canadian alternative rock band Barenaked Ladies wrote and recorded the show's theme song, which describes the history and formation of the universe and the Earth. Co-lead singer Ed Robertson was asked by Lorre and Prady to write a theme song for the show after the producers attended one of the band's concerts in Los Angeles. Coincidentally, Robertson had recently read Simon Singh's book Big Bang, and at the concert he improvised a freestyle rap about the origins of the universe. Lorre and Prady phoned him shortly thereafter and asked him to write the theme song. Having been asked to write songs for other films and shows, but ending up being rejected because producers favored songs by other artists, Robertson agreed to write the theme only after learning that Lorre and Prady had not asked anyone else. On October 9, 2007, a full-length (1 minute and 45 seconds) version of the song was released commercially. Although some unofficial pages identify the song title as History of Everything, the cover art for the single identifies the title as Big Bang Theory Theme. A music video also was released via special features on The Complete Fourth Season DVD and Blu-ray set.The theme was included on the band's greatest hits album, Hits from Yesterday & the Day Before, released on September 27, 2011. In September 2015, TMZ uncovered court documents showing that Steven Page sued[needs update] former bandmate Robertson over the song, alleging that he was promised 20 percent of the proceeds, but that Robertson has kept that money for himself. For the first three seasons, Galecki, Parsons, and Cuoco, the three main stars of the show, received up to $60,000 per episode. Their salaries rose to $200,000 per episode for the fourth season, then went up an additional $50,000 in each of the following three seasons, culminating in $350,000 per episode in the seventh season. In September 2013, Bialik and Rauch renegotiated the contracts they held since they were introduced to the series in 2010. On their old contracts, each was making $20,000–$30,000 per episode, while the new contracts doubled that, beginning at $60,000 per episode, increasing steadily to $100,000 per episode by the end of the contract, as well as adding another year for both. By season seven, Galecki, Parsons, and Cuoco were also receiving 0.25 percent of the series' back-end money. Before production began on the eighth season, the three plus Helberg and Nayyar looked to renegotiate new contracts, with Galecki, Parsons, and Cuoco seeking around $1 million per episode, as well as more back-end money. Contracts were signed in the beginning of August 2014, giving the three principal actors an estimated $1 million per episode for three years, with the possibility to extend for a fourth year. The deals also include larger pieces of the show, signing bonuses, production deals, and advances towards the back-end.Helberg and Nayyar were also able to renegotiate their contracts, giving them a per-ep\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created comment_text with 2500 symbols(spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The Canadian alternative rock band Barenaked Ladies\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName(latin, 50 letters spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											"",
											"// pm.test(\"Status code is 400\", function () {",
											"//     pm.response.to.have.status(400);",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"TestUserNameForCommentWithoutSpacesFiftyCharacters\",\n  \"text\": \"Leonard Hofstadter\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created comment_check userName_50letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Leonard Hofstadter\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create comment_blogId_no value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Невалидный json в теле запроса\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\":,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_blogId=0.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"blogId должен быть положительным числом\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\":0,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_not existing blogId=10.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Блог не найден\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\":10,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_negative blogId=-5.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"blogId должен быть положительным числом\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\":-5,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_ blogId=\"5\" as a String.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"blogId должен быть int\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": \"1\",\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_blogId_omitted.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"blogId не должен быть пустым\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "access_token={{access_token}};refresh_token={{refresh_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName with no value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Невалидный json в теле запроса\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\":,\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName value is not String.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"userName должен быть string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": 1234,\n  \"text\": \"Bazinga Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with 2501 symbols(spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"text must contain 2500 symbols max\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Priya\",\n  \"text\": \"One of the recurring plot lines is the relationship between Leonard and Penny. Leonard becomes attracted to Penny in the pilot episode, and his need to do favors for her is a frequent point of humor in the first season. Meanwhile, Penny dates a series of muscular, stereotypically attractive, unintelligent, and insensitive jocks. Their first long-term relationship begins when Leonard returns from a three-month expedition to the North Pole in the season 3 premiere. However, when Leonard tells Penny that he loves her, she realizes she cannot say it back, and they break up. Both Leonard and Penny go on to date other people, most notably with Leonard dating Raj's sister Priya for much of season 4. This relationship is jeopardized when Leonard mistakenly comes to believe that Raj has slept with Penny, and it ultimately ends when Priya sleeps with a former boyfriend in The Good Guy Fluctuation. Penny, who admits to missing Leonard in The Roommate Transmogrification, accepts his request to renew their relationship in The Beta Test Initiation. After Penny suggests having sex in The Launch Acceleration, Leonard breaks the mood by proposing to her. Penny says no but does not break up with him. She stops a proposal a second time in The Tangible Affection Proof. In the sixth-season episode, The 43 Peculiarity, Penny finally tells Leonard that she loves him. Although they both feel jealousy when the other receives significant attention from the opposite sex, Penny is secure in their relationship, even when he leaves on a four-month expedition to the North Sea in The Bon Voyage Reaction. After he returns, the relationship blossoms over the seventh season. In the penultimate episode The Gorilla Dissolution, Penny admits that they should marry and when Leonard realizes that she is serious, he proposes with a ring that he has been carrying for years. Leonard and Penny decide to elope to Las Vegas in the season 8 finale, but beforehand, wanting no secrets, Leonard admits to kissing another woman, Mandy Chow (Melissa Tang) while on the expedition. Despite this, Leonard and Penny finally marry in the season 9 premiere and remain happy. By the Season 9 finale, Penny and Leonard decide to have a second wedding ceremony for their family and friends, to make up for eloping. In season 10, Sheldon moves into Penny's old apartment with Amy, allowing Penny and Leonard to finally live on their own as husband and wife. In season 12, Penny announces that she does not want to have any children and Leonard reluctantly supports her decision. Later, her old boyfriend Zack and his new wife want Leonard to be a surrogate father to their kid since Zack is infertile. Penny reluctantly agrees to let Leonard donate his sperm. However, when she tries to seduce Leonard despite knowing he has to be abstinent for a few days, her visiting father, Wyatt, points out to Penny that her own actions suggest she is more conflicted over having kids than she lets on, and she admits she is serious, he propos\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created comment_text with 2501 symbols(spaces not included).",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"recurring plot lines\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with  only space in value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"text не должен быть пустым\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \" \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with value omitted.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Невалидный json в теле запроса\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Leonard Hofstadter\",\n  \"text\":\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with value as Integer.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"text должен быть string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": 123456\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text omitted.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"text не должен быть пустым\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Rajesh Kothrappali\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_not a JSON.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Невалидный json в теле запроса\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  \"blogId\": 1,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": 123456",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_empty JSON.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Невалидный json в теле запроса\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName_XSS Injection.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"<script>alert('XSS');</script>\",\n  \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text_SQL injection.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"'; SELECT * FROM users LIMIT 5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_text with empty value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"text не должен быть пустым\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"Sheldon Cooper\",\n  \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName contains only symbols.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"@*$!\",\n  \"text\": \"Bazinga\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created comment_check userName_symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"*$!\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName contains empty value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"",
											"// pm.test(\"Response message check\", function () {",
											"// var jsonData = pm.response.json();",
											"// pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"// });",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"userName не должен быть пустым\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"userName\": \"\",\n  \"text\": \"Raj Koothrappali\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created comment_check userName_empty UserName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// pm.test(\"Status code is 400\", function () {",
											"//     pm.response.to.have.status(400);",
											"// });",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Raj Koothrappali\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName omitted.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"",
											"// pm.test(\"Response message check\", function () {",
											"// var jsonData = pm.response.json();",
											"// pm.expect(jsonData. message).to.eql(\"Спасибо за ваш комментарий!\");",
											"// });",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response message check\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData. message).to.eql(\"userName не должен быть пустым\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blogId\": 1,\n  \"text\": \"Doppler effect\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created comment__userName omitted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Doppler effec\")",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/blog/{{blog_Id1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"blog",
										"{{blog_Id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment_userName(cyr, 51 letters spaces not included)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blogId\": 1,\n    \"userName\": \"Тестовое имя пользователя для создания комментария к блогу\",\n    \"text\": \"Bazinga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/blog/comment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"blog",
										"comment"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Создание комментария для определенной статьи блога\n\n200 Успешное создание комментария для определенной статьи блога  \n400 Невалидный json в теле запроса  \n400 blogId не должен быть пустым  \n400 blogId должен быть int  \n400 blogId должен быть положительным числом  \n400 text не должен быть пустым  \n400 text должен быть string  \n404 Блог не найден\n\n\\*text - min and max lenght - under discussion\n\n\\*userName min and max lenght - under discussion\n\n\\*userName being required or not required -under discussion"
		},
		{
			"name": "Reset-password",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Password reset request with correct ‘email’ of the registered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.value).to.eql(\"Ссылка для сброса пароля отправлена на Ваш email\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password reset request with correct ‘email’ of the registered user more than 2 times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 429\", function () {",
											"    pm.response.to.have.status(429);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Too Many Requests\");",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Слишком много запросов для сброса пароля. Повторите попытку через 10 минут\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Password reset request with invalid ‘email’ (without@)registered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Недопустимый адрес электронной почты\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"k0ndrateva861216yandex.ru\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request to reset password from ‘email’ of unregistered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Conflict\");",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Пользователь с таким email не существует\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"k0ndrateva8613!216@yandex.ru\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request to reset password with missing ‘email’ value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Невалидный json в теле запроса\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request to reset password key ‘email’ with boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"email должен быть string\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password reset request in the request body empty json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"email не должен быть пустым\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password reset request in the request body not json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Невалидный json в теле запроса\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n  \"email\": \"k0ndrateva861216@yandex.ru\"\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password reset request with SQL injection value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Недопустимый адрес электронной почты\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"';SELECT * FROM users LIMIT 3;-- \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password reset request with XSS injection value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Request has message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Недопустимый адрес электронной почты\");",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<script>alert('XSS')</script>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Проверки на отправку на почту ссылки для сброса пароля.\n\n200 Отправка на почту ссылки для сброса пароля  \n400 1) Невалидный json в теле запроса  \n400 2) email должен быть string  \n400 3) email не должен быть пустым  \n400 4) Недопустимый адрес электронной почты  \n409 Пользователь с таким email не существует  \n429 Слишком много запросов для сброса пароля. Повторите попытку через 10 мин"
		},
		{
			"name": "Sign-up",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Sign-up positive smoke",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test111@mail.com\", // valid new email\n    \"password\": \"1aA1aA1aA\" // valid password\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/sign-up",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign-up with existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test111@mail.com\", // ранее созданный пользователь\n    \"password\": \"1aA1aA1aA1aA\" // valid password\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/sign-up",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign-up positive password 8 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomEmail}}\", // valid new email\n    \"password\": \"1aA1aA1a\" // valid password\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/sign-up",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign-up positive password 20 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomEmail}}\", // valid new email\n    \"password\": \"1aA1aA1aA1aA1aA1aA1a\" // valid password\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/sign-up",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Negative Password",
							"item": [
								{
									"name": "Sign-up negative empty password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative password is a number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": 123123123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative short password (7 characters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test324234@test.ru\",\n    \"password\": \"1aA1aA1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative long password (21 charachters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test123123@test.ru\",\n    \"password\": \"1aA1aA1aA1aA1aA1aA1aA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative password with space",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test123123@test.ru\",\n    \"password\": \"1aA 1aA1aA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative password without Up chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test123123@test.ru\",\n    \"password\": \"1aa1aa1aa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative password without low chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test123123@test.ru\",\n    \"password\": \"1AA1AA1AA1AA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative password without digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test123123@test.ru\",\n    \"password\": \"ABCabcABC\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative password doesn't exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test@test.ru\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Email",
							"item": [
								{
									"name": "Sign-up negative invalid email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test@test\",\n    \"password\": \"1aA1aA1aA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative invalid email is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"1aA1aA1aA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sign-up negative email doesn't exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"1aA1aA1aA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/sign-up",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Sign-up negative body is not a JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    \"email\": \"test@test.ru\",\n    \"password\": \">Y}9D]:YIx{H.:5&FRb6\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/sign-up",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-up negative empty JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/sign-up",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				}
			],
			"description": "Тестирование метода для регистрации пользователя через электронную почту.\n\nТребования:\n\n1. Тело - json\n    \n2. email/password должен быть string\n    \n3. email/password не должен быть пустым\n    \n4. Допустимый адрес электронной почты\n    \n5. Пароль должен содержать не менее 8 символов\n    \n6. Пароль должен содержать не более 20 символов\n    \n7. Пароль не должен содержать пробел\n    \n8. Пароль должен содержать хотя бы одну цифру\n    \n9. Пароль должен содержать хотя бы одну строчную букву\n    \n10. Пароль должен содержать хотя бы одну заглавную букву\n    \n11. Пароль не содержит недопустимый символ (КАКОЙ???)\n    \n12. Регистрация не успешная если пользователь с таким email уже существует"
		},
		{
			"name": "Update User Data",
			"item": [
				{
					"name": "SQL vulnerabilities",
					"item": [
						{
							"name": "UpdateUserData - SQL Email injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"email\": \"m1@mail.ru' OR '1'='1\",\n\"userName\": \"testUser\",\n\"countryId\": 1,\n\"currency\": \"USD\",\n\"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - userName SQL injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"email\": \"m1@mail.ru' OR '1'='1\",\n\"userName\": \"';SELECT * FROM users LIMIT 3;-- \",\n\"countryId\": 1,\n\"currency\": \"USD\",\n\"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Positive",
					"item": [
						{
							"name": "Update User Data - All Fields Correct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Проверка текста сообщения\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.message).to.eql(\"Профиль пользователя обновлен\");",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"pm.response.to.have.status(\"400 Bad Request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"m1@mail.ru\",\n    \"userName\": \"testUser\",\n    \"countryId\": 1,\n    \"currency\": \"USD\",\n    \"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Update User Data - Incorrect Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка текста сообщения\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.message).to.eql(\"Недопустимый адрес электронной почты\");",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"pm.response.to.have.status(\"400 Bad Request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"m1mail.ru\",\n    \"userName\": \"testUser\",\n    \"countryId\": 1,\n    \"currency\": \"USD\",\n    \"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - Invalid Data Type for userName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка текста сообщения\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.message).to.eql(\"userName должен быть string\");",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"m1@mail.ru\",\n    \"userName\": 1,\n    \"countryId\": 1,\n    \"currency\": \"USD\",\n    \"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - Non-existent countryId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка текста сообщения\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.message).to.eql(\"Профиль пользователя обновлен\");",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\n      \"email\": \"user@example.com\",\n      \"userName\": \"testUser\",\n      \"countryId\": 9999,\n      \"currency\": \"USD\",\n      \"language\": \"en\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - countryId = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка текста сообщения\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.message).to.eql(\"Профиль пользователя обновлен\");",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\n      \"email\": \"user@example.com\",\n      \"userName\": \"testUser\",\n      \"countryId\": 0,\n      \"currency\": \"USD\",\n      \"language\": \"en\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - countryId = -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка текста сообщения\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.message).to.eql(\"Профиль пользователя обновлен\");",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MzAxOTE5MTcsImV4cCI6MTczMDE5MjUxNywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.KDocWjGEYNMx5EIdLmOOtvByax5MN6Uct6oXhzEpMsNLuAQqyuXTV1AFsLPUiMAQvEyzZK9MiLNq187s4q3wSpuK0Sit0_jywPiEcJw6YSIzalkB9XBgwedu-wG82pH3LhXgKOeCUQ7n4d1NoXB0xkyAkkXHf22QTj_Ao2SO1HZ1dhd6JSKXhxQ7D9sIDP4yhpFP14RKw2B-ylu_eI6D6F8otrUpG4zEo68d1Y6_NybuYmHiBujBXRflLlPlzWo8AZ89lKIxYJb9YNYzfcXPjtUGeHUjFmLEDJ7Cr8l665j2xjTW-Y8sDqGnTO0ws8TSeFip2GMB2LrsnY3RK0X0iQ",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "access_token={{access_token}}; refresh_token={{refresh_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\n      \"email\": \"user@example.com\",\n      \"userName\": \"testUser\",\n      \"countryId\": -1,\n      \"currency\": \"USD\",\n      \"language\": \"en\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - countryId = maximum integer",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"email\": \"user@example.com\",\n\"userName\": \"testUser\",\n\"countryId\": 2147483647,\n\"currency\": \"USD\",\n\"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - Email Field Missing",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userName\": \"testUser\",\n\"countryId\": 1,\n\"currency\": \"USD\",\n\"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - Empty JSON",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - Non-JSON",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"email\": \"user@example.com\",\n\"userName\": \"testUser\",\n\"countryId\": 1,\n\"currency\": \"USD\",\n\"language\": \"en\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserData - No Auth Token",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"email\": \"user@example.com\",\n\"userName\": \"testUser\",\n\"countryId\": 1,\n\"currency\": \"USD\",\n\"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/user/update",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login_getTokens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\",  ()=>{",
									"    pm.response.to.have.status(204)",
									"})",
									"",
									"pm.test(\"fetch access_token\", ()=>{",
									"    var access_token = pm.cookies.get('access_token');",
									"    pm.collectionVariables.set(\"access_token\", access_token);",
									"})",
									"",
									"pm.test(\"fetch refresh_token\", ()=>{",
									"    var refresh_token = pm.cookies.get('refresh_token');",
									"    pm.collectionVariables.set(\"refresh_token\", refresh_token);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"m1@mail.ru\",\n  \"password\": \"!QAZ2wsx\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dev.relocatein.eu:90/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"dev",
								"relocatein",
								"eu"
							],
							"port": "90",
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserData",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3Mjk1ODIyNTMsImV4cCI6MTcyOTU4Mjg1Mywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoibTFAbWFpbC5ydSJ9.rzBVTCthY3QP6BZ1Yr7idcCKJRjg-08iSuL3mqCw94Ld6pYO7idt7mVolls07HCTPDmZn1OZUkaEZZpMGaounrma_7s1jk7CQBh90Nq0tHdW7-qddzwAr9IOfhcO3fvDm6vyBBj3bkmY6RC_CdyJ7AdErQeuQ0nvZyIMMXD6Z-rbt5BX8lhPWdXCmabus-zALSv-uFB97e3Ava-7ys1EqGPmPlLlysy9lm-hGxzlnKhVT6C8FaxFHUP9PLfh2nmH1Y6RlQsCrMoRin_aMQwroZH9KBObuYu36_QADB7JDOZJiE6LYL6EIfjk_dyWy68ygReW-M6bOshf8sfi_RKugw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://dev.relocatein.eu:90/api/v1/user",
							"protocol": "http",
							"host": [
								"dev",
								"relocatein",
								"eu"
							],
							"port": "90",
							"path": [
								"api",
								"v1",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Change password",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Log In and get access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is correct\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has correct string\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													"\r",
													"const cookies = pm.response.headers.filter(header => header.key === \"Set-Cookie\");\r",
													"\r",
													"pm.test(\"fetch access_token\", ()=>{\r",
													"    var access_token = pm.cookies.get('access_token');\r",
													"    pm.collectionVariables.set(\"access_token\", access_token);\r",
													"})\r",
													"\r",
													"pm.test(\"fetch refresh_token\", ()=>{\r",
													"    var refresh_token = pm.cookies.get('refresh_token');\r",
													"    pm.collectionVariables.set(\"refresh_token\", refresh_token);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\":  \"{{UserEmail}}\",\r\n  \"password\": \"{{CurrentPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Получаем токены из переменных коллекции\r",
													"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
													"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
													"\r",
													"// Устанавливаем заголовок Cookie с токенами\r",
													"pm.request.headers.add({\r",
													"    key: \"Cookie\",\r",
													"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.response.json();\r",
													"});\r",
													"pm.test(\"Status code 200 is correct\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Status code name has correct string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response message is valid\", function() {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Пароль изменен\")\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"currentPassword\": \"{{CurrentPassword}}\",\r\n   \"newPassword\": \"{{NewPassword}}\" \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user/change-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"change-password"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "UnAuthorizedUser",
									"item": [
										{
											"name": "Positive_LogOut",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/v1/auth/logout",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change password by unauthorized user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 401 is correct\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Access токен не найден\")\r",
															"})\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"currentPassword\": \"Oldstring1\",\r\n   \"newPassword\": \"Test12345\" \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ExpiredToken",
									"item": [
										{
											"name": "Log In and get access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Извлечение тех response Headers, где key: Set-Cookie\r",
															"const cookies = pm.response.headers.filter(header => header.key === \"Set-Cookie\");\r",
															"\r",
															"// Инициализация переменной для хранения устаревших куки\r",
															"let expiredCookies = [];\r",
															"\r",
															"// Установка даты истечения в прошлом (например, 1 января 2023 года). Можно использовать просто строковое значение:\r",
															"//  const expiredDate = 'Sun, 01 Jan 2023 00:00:00 GMT';\r",
															"const expiredDate = new Date('2023-01-01T00:00:00Z').toUTCString();\r",
															"\r",
															"// Перебор заголовков cookie \r",
															"cookies.forEach(cookie => {\r",
															"const cookieValue = cookie.value;\r",
															"\r",
															"// Проверяем, содержит ли cookie access_token или refresh_token\r",
															"// Устанавливаем expires в 2023 год\r",
															"    const expiredCookie = cookieValue.replace(/expires=[^;]*/, `expires=${expiredDate}`);\r",
															"\r",
															"    // Добавляем устаревшие куки в массив\r",
															"    expiredCookies.push(expiredCookie);\r",
															"    if (cookieValue.includes(\"access_token\")) {\r",
															"        // Извлекаем access_token\r",
															"        accessToken = cookieValue.split(';')[0].split('=')[1]; // Берём только значение\r",
															"    } else if (cookieValue.includes(\"refresh_token\")) {\r",
															"        // Извлекаем refresh_token\r",
															"        refreshToken = cookieValue.split(';')[0].split('=')[1]; // Берём только значение\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"first_test_user@gmail.com\",\r\n  \"password\": \"Testing123\"\r\n//   \"password\": \"Test12345\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/api/v1/auth/login",
													"host": [
														"{{URL}}"
													],
													"path": [
														"api",
														"v1",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "change password with expired token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 401 is correct\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Expired JWT Token\")\r",
															"})\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Получаем токены из переменных коллекции\r",
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"// Получаем устаревшие куки из переменной коллекции\r",
															"const expiredCookies = pm.collectionVariables.get(\"expiredCookies\");\r",
															"\r",
															"// Устанавливаем заголовок Cookie с устаревшими токенами\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: expiredCookies\r",
															"});\r",
															"\r",
															"// Логирование для проверки\r",
															"console.log(\"Используем устаревшие куки:\", expiredCookies);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"currentPassword\": \"Testing123sss\",\r\n   \"newPassword\": \"Test12345\" \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "IncorrectPassword",
									"item": [
										{
											"name": "NewPassword is equal to currentPassword",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 409 is correct\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Conflict\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль совпадает с текущим\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{NewPassword}}\",   \"newPassword\": \"{{NewPassword}}\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "Body. Using invalid key-value format.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Невалидный json в теле запроса\")\r",
															"})\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   null,   \"newPassword\": \"Testing123\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "Body. Input empty JSON.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"newPassword не должен быть пустым\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "  { } ",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "Body. Input not JSON.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Невалидный json в теле запроса\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"currentPassword\": \"Oldstring1\",\r\n\"newPassword\": \"Newstring1\"\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Using invalid data format.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"newPassword должен быть string\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": 1  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Input NULL as a value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"newPassword должен быть string\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": null  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Empty field as a value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"newPassword не должен быть пустым\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Length less than 8 characters.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать не менее 8 символов\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"Test1\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Length more than 20 characters.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать не более 20 символов\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",\r\n    \"newPassword\": \"Testing123Testing123Testing123\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Using whitespace.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль не должен содержать пробел\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"Testing 123\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Without digits",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать хотя бы одну цифру\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"Testinggg\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Just digits.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать хотя бы одну строчную букву\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"12345678\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Upper case letters and digits only.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать хотя бы одну строчную букву\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"TESTING123\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "New password. Lower case letters and digits only.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать хотя бы одну заглавную букву\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"{{CurrentPassword}}\",   \"newPassword\": \"testing123\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "NewPassword. Input SQL injection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать не более 20 символов\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"Testing123\",   \"newPassword\": \"'; SELECT * FROM users LIMIT 5\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "NewPassword. Input masked SQL injection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль не должен содержать пробел\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"Testing123\",   \"newPassword\": \"\\u0027\\u0027 OR \\u0031\\u003d\\u0031 LIMIT \\u0031 --\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "NewPassword. Input XXS injection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Новый пароль должен содержать не более 20 символов\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"Testing123\",   \"newPassword\": \"<script>alert('XSS')</script>\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "Current password. Using invalid data format.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"currentPassword должен быть string\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": 1,   \"newPassword\": \"Newstring1\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPassword. Input incorrect currentPassword.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 409 is correct\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Conflict\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Неверный пароль\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"Testing1\",   \"newPassword\": \"Testing123\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPassword. Input SQL injection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 409 is correct\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Conflict\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Неверный пароль\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"'or 1=1 --\",   \"newPassword\": \"Test12345\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPassword. Input masked SQL injection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 409 is correct\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Conflict\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Неверный пароль\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"\\u0027\\u0027 OR \\u0031\\u003d\\u0031 LIMIT \\u0031 --\",   \"newPassword\": \"Test12345\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPassword. Input XXS injection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 409 is correct\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Conflict\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Неверный пароль\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": \"<script>alert('XSS')</script>\",   \"newPassword\": \"Test12345\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPassword. Input NULL as a value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is JSON\", function () {\r",
															"    pm.response.json();\r",
															"});\r",
															"pm.test(\"Status code 400 is correct\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has correct string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response message is valid\", function() {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"newPassword должен быть string\")\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
															"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
															"\r",
															"pm.request.headers.add({\r",
															"    key: \"Cookie\",\r",
															"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{   \"currentPassword\": null,   \"newPassword\": \"Newstring1\"  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/v1/user/change-password",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"change-password"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Positive. Back change password.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200 is correct\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response message is valid\", function() {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Пароль изменен\")\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Получаем токены из переменных коллекции\r",
											"const accessToken = pm.collectionVariables.get(\"access_token\");\r",
											"const refreshToken = pm.collectionVariables.get(\"refresh_token\");\r",
											"\r",
											"// Устанавливаем заголовок Cookie с токенами\r",
											"pm.request.headers.add({\r",
											"    key: \"Cookie\",\r",
											"    value: `access_token=${accessToken}; refresh_token=${refreshToken}`\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"currentPassword\": \"Test12345\",\r\n   \"newPassword\": \"Testing123\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/api/v1/user/change-password",
									"host": [
										"{{URL}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"change-password"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const email = 'first_test_user@gmail.com';\r",
									"const CurrentPassword = 'Testing123';\r",
									"const NewPassword = 'Test12345'\r",
									"\r",
									"pm.variables.set(\"UserEmail\", email);\r",
									"pm.variables.set(\"CurrentPassword\", CurrentPassword);\r",
									"pm.variables.set(\"NewPassword\", NewPassword);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// // Выполнение запроса POST для смены пароля\r",
									"// pm.sendRequest({\r",
									"//     url: '{{base_url}}/api/v1/user/change-password',\r",
									"//     method: 'POST',\r",
									"//     header: {\r",
									"//         'Content-Type': 'application/json',\r",
									"//         'Cookie': `access_token=${pm.collectionVariables.get(\"access_token\")}; refresh_token=${pm.collectionVariables.get(\"refresh_token\")}`\r",
									"//     },\r",
									"//     body: {\r",
									"//         mode: 'raw',\r",
									"//         raw: JSON.stringify({\r",
									"//             \"currentPassword\": pm.collectionVariables.get(\"NewPassword\"),\r",
									"//             \"newPassword\": pm.collectionVariables.get(\"CurrentPassword\")\r",
									"//         })\r",
									"//     }\r",
									"// }, (err, res) => {\r",
									"//     if (err) {\r",
									"//         console.error('Error during change-password request:', err);\r",
									"//         return;\r",
									"//     }\r",
									"//     if (res.code === 204) {\r",
									"//         console.log('Password changed successfully.');\r",
									"//     } else {\r",
									"//         console.warn('Failed to change password:', res.code, res.status, res.json());\r",
									"//     }\r",
									"// })"
								]
							}
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		}
	]
}